# ********RoostGPT********

# Test generated by RoostGPT for test api-fulfilment using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /productOrder/{order.Id}_patch for http method type PATCH 
# RoostTestHash=a40197b7fc
# 
# 

# ********RoostGPT********
Feature: Testing Product Order API

Background:
  * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
  * url urlBase
  * def AUTH_TOKEN = karate.properties['AUTH_TOKEN']
  * configure headers = { Authorization: '#(AUTH_TOKEN)' }

Scenario Outline: Test PATCH /productOrder/{order.Id} endpoint with valid and invalid inputs

  Given path 'productOrder', '<orderId>'
  And request """{
    "order": {
      "correlationOrder": "<correlationOrder>",
      "associatedDocument": "<associatedDocument>",
      "associatedDocumentDate": "<associatedDocumentDate>",
      "type": "<type>",
      "infraType": "<infraType>",
      "orderItem": [],
      "task": {
        "description": "<description>",
        "updateDate": "<updateDate>",
        "action": "<action>"
      }
    }
  }"""
  When method patch
  Then match status == '<expectedStatus>'
  And match response == { "type": "#string", "message": "#string", "code": "#string" }

  Examples:
    | orderId  | correlationOrder | associatedDocument | associatedDocumentDate | type | infraType | description | updateDate | action | expectedStatus |
    | 'order1' | 'correlation1'  | 'doc1'             | '2021-12-01T00:00:00Z' | 'type1' | 'infra1' | 'desc1' | '2021-12-01T00:00:00Z' | 'action1' | 200 |
    | 'order2' | 'correlation2'  | 'doc2'             | 'not a date'           | 'type2' | 'infra2' | 'desc2' | '2021-12-01T00:00:00Z' | 'action2' | 400 |
    | 'order3' | 'correlation3'  | 'doc3'             | '2021-12-01T00:00:00Z' | 'type3' | 'infra3' | 'desc3' | 'not a date'           | 'action3' | 400 |
