# ********RoostGPT********

# Test generated by RoostGPT for test api-fulfilment using AI Type Open AI and AI Model gpt-4
# 
# Feature file generated for /listener/cancelProductOrderCreateEvent_post for http method type POST 
# RoostTestHash=999efa10b6
# 
# 

# ********RoostGPT********
Feature: Cancel Product Order Create Event By Client

  Background:
    * def urlBase = karate.properties['url.base'] || karate.get('urlBase', 'http://localhost:4010')
    * url urlBase
    * configure headers = { 'Authorization': '#(karate.properties['AUTH_TOKEN'])' }

  Scenario Outline: Validate API endpoint for different valid inputs
    Given path '/listener/cancelProductOrderCreateEvent'
    And request """
    <body>
    """
    When method post
    Then status <status>
    And match response == <response>

    Examples:
      | body                                                                                         | status | response |
      | { "notification": { "order": { "associatedDocument": "VTT001", "id": "20230315000001" } } }  |    204 | {}       |
      | { "notification": { "order": { "associatedDocument": "VTT002", "id": "20230315000002" } } }  |    204 | {}       |
      | { "notification": { "order": { "associatedDocument": "INVALID", "id": "20230315000001" } } } |    400 | {}       |
      | { "notification": { "order": { "associatedDocument": "VTT001", "id": "INVALID" } } }         |    400 | {}       |

  Scenario: Check Unauthorized request
    Given path '/listener/cancelProductOrderCreateEvent'
    And request """
    { "notification": { "order": { "associatedDocument": "VTT001", "id": "20230315000001" } } }
    """
    And configure headers = { 'Authorization': 'INVALID_TOKEN' }
    When method post
    Then status 401

  Scenario: Check Server Error
    Given path '/listener/cancelProductOrderCreateEvent'
    And request """
    { "notification": { "order": { "associatedDocument": "VTT001", "id": "20230315000001" } } }
    """
    And configure headers = { 'Authorization': 'SERVER_ERROR_TOKEN' }
    When method post
    Then status 500

  Scenario: Check Service Unavailable
    Given path '/listener/cancelProductOrderCreateEvent'
    And request """
    { "notification": { "order": { "associatedDocument": "VTT001", "id": "20230315000001" } } }
    """
    And configure headers = { 'Authorization': 'SERVICE_UNAVAILABLE_TOKEN' }
    When method post
    Then status 503

  Scenario: Check Request Timeout
    Given path '/listener/cancelProductOrderCreateEvent'
    And request """
    { "notification": { "order": { "associatedDocument": "VTT001", "id": "20230315000001" } } }
    """
    And configure headers = { 'Authorization': 'TIMEOUT_TOKEN' }
    When method post
    Then status 504
